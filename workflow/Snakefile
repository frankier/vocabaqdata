from os.path import join as pjoin
from itertools import chain
from typing import List


def run_R(script_path, *args):
    return shell("R " + pjoin(workflow.current_basedir, script_path) + " " + " ".join(args))


def cnf(name, val):
    globals()[name] = config.setdefault(name, val)


# Directories
cnf("WORK", "work")

# Dependencies
cnf("BINEXTRA", pjoin(WORK, "bin"))
cnf("TABULA_URL", "https://github.com/tabulapdf/tabula-java/releases/download/v1.0.4/tabula-1.0.4-jar-with-dependencies.jar")
cnf("TABULA_JAR", pjoin(BINEXTRA, "tabula.jar"))


class Dataset:
    def __init__(self, name, out, src_name=None):
        self.name = name
        if isinstance(src_name, str):
            src_name = [src_name]
        elif src_name is None:
            src_name = []
        self.src_name = src_name
        self.src = [globals()[src_name] for src_name in src_name]
        self._out = out

    def is_available(self):
        return all((src != "/does/not/exist" for src in self.src))

    @property
    def available_out(self) -> List[str]:
        if self.is_available():
            return self._out
        else:
            return []

    @property
    def out(self):
        return self._out

    def __str__(self):
        if self.is_available():
            stat = "YES"
        else:
            names = "; ".join(self.src_name)
            stat = f"NO (pass -C {names} to build)"
        return "{:>30} {}".format(self.name, stat)


def print_availabilities():
    print(" *** ")
    print()
    for dataset in DATASETS:
        print(str(dataset))
    print()
    print(" *** ")


def all_available_input(wc):
    print_availabilities()
    return [out for dataset in DATASETS for out in dataset.available_out]


rule all_available:
    input: all_available_input


def all_input(wc):
    print_availabilities()
    return [out for dataset in DATASETS for out in dataset.out]


rule all:
    input: all_input


## Dependencies
rule download_tabula:
    output:
        TABULA_JAR
    shell:
        "mkdir -p " + BINEXTRA + " && " +
        "cd " + BINEXTRA + " && " +
        "wget " + TABULA_URL + " -O " + TABULA_JAR


## Datasets
include: "datasets/evkd1.smk"
include: "datasets/svl12k.smk"
include: "datasets/testyourvocab.smk"
include: "datasets/ecp.smk"
include: "datasets/elp.smk"
include: "datasets/flp.smk"
include: "datasets/wordbank.smk"
include: "datasets/blp.smk"


DATASETS = [
    Dataset("SVL12K", rules.all_svl12k.output, "SVL12K_RAW"),
    Dataset("EVKD1", rules.all_evkd1.output, "EVKD1_RAW"),
    Dataset("TESTYOURVOCAB", rules.import_testyourvocab_all.output, ["TESTYOURVOCAB_RANKS", "TESTYOURVOCAB_NATIVE_RAW", "TESTYOURVOCAB_NONNATIVE_RAW"]),
    Dataset("ECP", rules.import_ecp.output),
    Dataset("ELP", rules.import_elp.output),
    Dataset("FLP", rules.import_flp.output),
    Dataset("BLP", rules.import_blp_all.output),
    Dataset("WORDBANK", rules.download_and_export_wordbank.output),
]
